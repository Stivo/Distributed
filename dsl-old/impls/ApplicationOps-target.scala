/**
 * *********************************************************
 * * AUTOGENERATED USING bin/lift_user_class.py
 * **********************************************************
 */


import java.io.PrintWriter
import scala.virtualization.lms.common.ScalaGenFat
import scala.virtualization.lms.util.OverloadHack
import scala.virtualization.lms.common.{Base, BaseExp, EffectExp, BaseFatExp, Variables, StructExp }

trait LogEntryOps extends Base with Variables with OverloadHack {

  class LogEntry
  
  object LogEntry {
    def apply(request: Rep[Long], timestamp: Rep[Double], url: Rep[String]) = logentry_obj_new(request, timestamp, url)
  }

  implicit def repLogEntryToLogEntryOps(x: Rep[LogEntry]) = new logentryOpsCls(x)

  class logentryOpsCls(__x: Rep[LogEntry]) {
    def request = logentry_request(__x)
    def timestamp = logentry_timestamp(__x)
    def url = logentry_url(__x)
  }

  //object defs
  def logentry_obj_new(request: Rep[Long], timestamp: Rep[Double], url: Rep[String]): Rep[LogEntry]

  //class defs
  def logentry_request(__x: Rep[LogEntry]): Rep[Long]
  def logentry_timestamp(__x: Rep[LogEntry]): Rep[Double]
  def logentry_url(__x: Rep[LogEntry]): Rep[String]
}

trait LogEntryOpsExp extends BaseExp with LogEntryOps with StructExp with EffectExp with BaseFatExp {
  
  def logentry_obj_new(request: Exp[Long], timestamp: Exp[Double], url: Exp[String]) = struct("LogEntry"::Nil, Map("request"->request, "timestamp" -> timestamp, "url" -> url))
  def logentry_request(__x: Rep[LogEntry]) = field[Long](__x, "request")
  def logentry_timestamp(__x: Rep[LogEntry]) = field[Double](__x, "timestamp")
  def logentry_url(__x: Rep[LogEntry]) = field[String](__x, "url")

  override def mirror[A: Manifest](e: Def[A], f: Transformer): Exp[A] = e match {
    case _ => super.mirror(e, f)
  }
}

trait ApplicationOps extends LogEntryOps
trait ApplicationOpsExp extends LogEntryOpsExp
