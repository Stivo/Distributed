/**
 * *********************************************************
 * * AUTOGENERATED USING bin/lift_user_class.py
 * **********************************************************
 */

import java.io.PrintWriter
import scala.virtualization.lms.common.ScalaGenFat
import scala.virtualization.lms.util.OverloadHack
import scala.virtualization.lms.common.{ Base, StructExp, EffectExp, BaseFatExp, Variables }

trait LogEntryOps extends Base with Variables with OverloadHack {

  class LogEntry

  object LogEntry {
    def apply(request: Rep[Long], timestamp: Rep[Double], url: Rep[String]) = logentry_obj_new(request, timestamp, url)
  }

  implicit def repLogEntryToLogEntryOps(x: Rep[LogEntry]) = new logentryOpsCls(x)
  class logentryOpsCls(__x: Rep[LogEntry]) {
    def request = logentry_request(__x)
    def timestamp = logentry_timestamp(__x)
    def url = logentry_url(__x)
  }

  //object defs
  def logentry_obj_new(request: Rep[Long], timestamp: Rep[Double], url: Rep[String]): Rep[LogEntry]

  //class defs
  def logentry_request(__x: Rep[LogEntry]): Rep[Long]
  def logentry_timestamp(__x: Rep[LogEntry]): Rep[Double]
  def logentry_url(__x: Rep[LogEntry]): Rep[String]
}

trait LogEntryOpsExp extends LogEntryOps with StructExp with EffectExp with BaseFatExp {
  def logentry_obj_new(request: Exp[Long], timestamp: Exp[Double], url: Exp[String]) = struct[LogEntry]("LogEntry" :: Nil, Map("request" -> request, "timestamp" -> timestamp, "url" -> url))
  def logentry_request(__x: Rep[LogEntry]) = field[Long](__x, "request")
  def logentry_timestamp(__x: Rep[LogEntry]) = field[Double](__x, "timestamp")
  def logentry_url(__x: Rep[LogEntry]) = field[String](__x, "url")
}

trait PageCountEntryOps extends Base with Variables with OverloadHack {

  class PageCountEntry

  object PageCountEntry {
    def apply(language: Rep[String], project: Rep[String], site: Rep[String], number: Rep[Long], size: Rep[Long]) = pagecountentry_obj_new(language, project, site, number, size)
  }

  implicit def repPageCountEntryToPageCountEntryOps(x: Rep[PageCountEntry]) = new pagecountentryOpsCls(x)
  class pagecountentryOpsCls(__x: Rep[PageCountEntry]) {
    def language = pagecountentry_language(__x)
    def project = pagecountentry_project(__x)
    def site = pagecountentry_site(__x)
    def number = pagecountentry_number(__x)
    def size = pagecountentry_size(__x)
  }

  //object defs
  def pagecountentry_obj_new(language: Rep[String], project: Rep[String], site: Rep[String], number: Rep[Long], size: Rep[Long]): Rep[PageCountEntry]

  //class defs
  def pagecountentry_language(__x: Rep[PageCountEntry]): Rep[String]
  def pagecountentry_project(__x: Rep[PageCountEntry]): Rep[String]
  def pagecountentry_site(__x: Rep[PageCountEntry]): Rep[String]
  def pagecountentry_number(__x: Rep[PageCountEntry]): Rep[Long]
  def pagecountentry_size(__x: Rep[PageCountEntry]): Rep[Long]
}

trait PageCountEntryOpsExp extends PageCountEntryOps with StructExp with EffectExp with BaseFatExp {
  def pagecountentry_obj_new(language: Exp[String], project: Exp[String], site: Exp[String], number: Exp[Long], size: Exp[Long]) = struct[PageCountEntry]("PageCountEntry" :: Nil, Map("language" -> language, "project" -> project, "site" -> site, "number" -> number, "size" -> size))
  def pagecountentry_language(__x: Rep[PageCountEntry]) = field[String](__x, "language")
  def pagecountentry_project(__x: Rep[PageCountEntry]) = field[String](__x, "project")
  def pagecountentry_site(__x: Rep[PageCountEntry]) = field[String](__x, "site")
  def pagecountentry_number(__x: Rep[PageCountEntry]) = field[Long](__x, "number")
  def pagecountentry_size(__x: Rep[PageCountEntry]) = field[Long](__x, "size")
}

trait N1Ops extends Base with Variables with OverloadHack with N2Ops {

  class N1

  object N1 {
    def apply(n2: Rep[N2], n1id: Rep[String], n1Junk: Rep[Int]) = n1_obj_new(n2, n1id, n1Junk)
  }

  implicit def repN1ToN1Ops(x: Rep[N1]) = new n1OpsCls(x)
  class n1OpsCls(__x: Rep[N1]) {
    def n2 = n1_n2(__x)
    def n1id = n1_n1id(__x)
    def n1Junk = n1_n1Junk(__x)
  }

  //object defs
  def n1_obj_new(n2: Rep[N2], n1id: Rep[String], n1Junk: Rep[Int]): Rep[N1]

  //class defs
  def n1_n2(__x: Rep[N1]): Rep[N2]
  def n1_n1id(__x: Rep[N1]): Rep[String]
  def n1_n1Junk(__x: Rep[N1]): Rep[Int]
}

trait N1OpsExp extends N1Ops with StructExp with EffectExp with BaseFatExp with N2Ops {
  def n1_obj_new(n2: Exp[N2], n1id: Exp[String], n1Junk: Exp[Int]) = struct[N1]("N1" :: Nil, Map("n2" -> n2, "n1id" -> n1id, "n1Junk" -> n1Junk))
  def n1_n2(__x: Rep[N1]) = field[N2](__x, "n2")
  def n1_n1id(__x: Rep[N1]) = field[String](__x, "n1id")
  def n1_n1Junk(__x: Rep[N1]) = field[Int](__x, "n1Junk")
}

trait N2Ops extends Base with Variables with OverloadHack {

  class N2

  object N2 {
    def apply(n2id: Rep[String], n2junk: Rep[Int]) = n2_obj_new(n2id, n2junk)
  }

  implicit def repN2ToN2Ops(x: Rep[N2]) = new n2OpsCls(x)
  class n2OpsCls(__x: Rep[N2]) {
    def n2id = n2_n2id(__x)
    def n2junk = n2_n2junk(__x)
  }

  //object defs
  def n2_obj_new(n2id: Rep[String], n2junk: Rep[Int]): Rep[N2]

  //class defs
  def n2_n2id(__x: Rep[N2]): Rep[String]
  def n2_n2junk(__x: Rep[N2]): Rep[Int]
}

trait N2OpsExp extends N2Ops with StructExp with EffectExp with BaseFatExp {
  def n2_obj_new(n2id: Exp[String], n2junk: Exp[Int]) = struct[N2]("N2" :: Nil, Map("n2id" -> n2id, "n2junk" -> n2junk))
  def n2_n2id(__x: Rep[N2]) = field[String](__x, "n2id")
  def n2_n2junk(__x: Rep[N2]) = field[Int](__x, "n2junk")
}

trait UserOps extends Base with Variables with OverloadHack {

  class User

  object User {
    def apply(userId: Rep[Int], name: Rep[String], age: Rep[Int]) = user_obj_new(userId, name, age)
  }

  implicit def repUserToUserOps(x: Rep[User]) = new userOpsCls(x)
  class userOpsCls(__x: Rep[User]) {
    def userId = user_userId(__x)
    def name = user_name(__x)
    def age = user_age(__x)
  }

  //object defs
  def user_obj_new(userId: Rep[Int], name: Rep[String], age: Rep[Int]): Rep[User]

  //class defs
  def user_userId(__x: Rep[User]): Rep[Int]
  def user_name(__x: Rep[User]): Rep[String]
  def user_age(__x: Rep[User]): Rep[Int]
}

trait UserOpsExp extends UserOps with StructExp with EffectExp with BaseFatExp {
  def user_obj_new(userId: Exp[Int], name: Exp[String], age: Exp[Int]) = struct[User]("User" :: Nil, Map("userId" -> userId, "name" -> name, "age" -> age))
  def user_userId(__x: Rep[User]) = field[Int](__x, "userId")
  def user_name(__x: Rep[User]) = field[String](__x, "name")
  def user_age(__x: Rep[User]) = field[Int](__x, "age")
}

trait AddressOps extends Base with Variables with OverloadHack {

  class Address

  object Address {
    def apply(userId: Rep[Int], street: Rep[String], zip: Rep[Int], city: Rep[String]) = address_obj_new(userId, street, zip, city)
  }

  implicit def repAddressToAddressOps(x: Rep[Address]) = new addressOpsCls(x)
  class addressOpsCls(__x: Rep[Address]) {
    def userId = address_userId(__x)
    def street = address_street(__x)
    def zip = address_zip(__x)
    def city = address_city(__x)
  }

  //object defs
  def address_obj_new(userId: Rep[Int], street: Rep[String], zip: Rep[Int], city: Rep[String]): Rep[Address]

  //class defs
  def address_userId(__x: Rep[Address]): Rep[Int]
  def address_street(__x: Rep[Address]): Rep[String]
  def address_zip(__x: Rep[Address]): Rep[Int]
  def address_city(__x: Rep[Address]): Rep[String]
}

trait AddressOpsExp extends AddressOps with StructExp with EffectExp with BaseFatExp {
  def address_obj_new(userId: Exp[Int], street: Exp[String], zip: Exp[Int], city: Exp[String]) = struct[Address]("Address" :: Nil, Map("userId" -> userId, "street" -> street, "zip" -> zip, "city" -> city))
  def address_userId(__x: Rep[Address]) = field[Int](__x, "userId")
  def address_street(__x: Rep[Address]) = field[String](__x, "street")
  def address_zip(__x: Rep[Address]) = field[Int](__x, "zip")
  def address_city(__x: Rep[Address]) = field[String](__x, "city")
}

trait ApplicationOps extends LogEntryOps with PageCountEntryOps with N1Ops with N2Ops with UserOps with AddressOps
trait ApplicationOpsExp extends LogEntryOpsExp with PageCountEntryOpsExp with N1OpsExp with N2OpsExp with UserOpsExp with AddressOpsExp
