/**
 * *********************************************************
 * * AUTOGENERATED USING bin/lift_user_class.py
 * **********************************************************
 */

import java.io.PrintWriter
import scala.virtualization.lms.common.ScalaGenFat
import scala.virtualization.lms.util.OverloadHack
import scala.virtualization.lms.common.{ Base, StructExp, EffectExp, BaseFatExp, Variables }

trait LogEntryOps extends Base with Variables with OverloadHack {

  class LogEntry

  object LogEntry {
    def apply(request: Rep[Long], timestamp: Rep[Double], url: Rep[String]) = logentry_obj_new(request, timestamp, url)
  }

  implicit def repLogEntryToLogEntryOps(x: Rep[LogEntry]) = new logentryOpsCls(x)
  class logentryOpsCls(__x: Rep[LogEntry]) {
    def request = logentry_request(__x)
    def timestamp = logentry_timestamp(__x)
    def url = logentry_url(__x)
  }

  //object defs
  def logentry_obj_new(request: Rep[Long], timestamp: Rep[Double], url: Rep[String]): Rep[LogEntry]

  //class defs
  def logentry_request(__x: Rep[LogEntry]): Rep[Long]
  def logentry_timestamp(__x: Rep[LogEntry]): Rep[Double]
  def logentry_url(__x: Rep[LogEntry]): Rep[String]
}

trait LogEntryOpsExp extends LogEntryOps with StructExp with EffectExp with BaseFatExp {
  def logentry_obj_new(request: Exp[Long], timestamp: Exp[Double], url: Exp[String]) = struct[LogEntry]("LogEntry" :: Nil, Map("request" -> request, "timestamp" -> timestamp, "url" -> url))
  def logentry_request(__x: Rep[LogEntry]) = field[Long](__x, "request")
  def logentry_timestamp(__x: Rep[LogEntry]) = field[Double](__x, "timestamp")
  def logentry_url(__x: Rep[LogEntry]) = field[String](__x, "url")

}

trait N1Ops extends Base with Variables with OverloadHack with N2Ops {

  class N1

  object N1 {
    def apply(n2: Rep[N2], n1id: Rep[String], n1Junk: Rep[Int]) = n1_obj_new(n2, n1id, n1Junk)
  }

  implicit def repN1ToN1Ops(x: Rep[N1]) = new n1OpsCls(x)
  class n1OpsCls(__x: Rep[N1]) {
    def n2 = n1_n2(__x)
    def n1id = n1_n1id(__x)
    def n1Junk = n1_n1Junk(__x)
  }

  //object defs
  def n1_obj_new(n2: Rep[N2], n1id: Rep[String], n1Junk: Rep[Int]): Rep[N1]

  //class defs
  def n1_n2(__x: Rep[N1]): Rep[N2]
  def n1_n1id(__x: Rep[N1]): Rep[String]
  def n1_n1Junk(__x: Rep[N1]): Rep[Int]
}

trait N1OpsExp extends N1Ops with StructExp with EffectExp with BaseFatExp {
  def n1_obj_new(n2: Exp[N2], n1id: Exp[String], n1Junk: Exp[Int]) = struct[N1]("N1" :: Nil, Map("n2" -> n2, "n1id" -> n1id, "n1Junk" -> n1Junk))
  def n1_n2(__x: Rep[N1]) = field[N2](__x, "n2")
  def n1_n1id(__x: Rep[N1]) = field[String](__x, "n1id")
  def n1_n1Junk(__x: Rep[N1]) = field[Int](__x, "n1Junk")

}

trait N2Ops extends Base with Variables with OverloadHack {

  class N2

  object N2 {
    def apply(n2id: Rep[String], n2junk: Rep[Int]) = n2_obj_new(n2id, n2junk)
  }

  implicit def repN2ToN2Ops(x: Rep[N2]) = new n2OpsCls(x)
  class n2OpsCls(__x: Rep[N2]) {
    def n2id = n2_n2id(__x)
    def n2junk = n2_n2junk(__x)
  }

  //object defs
  def n2_obj_new(n2id: Rep[String], n2junk: Rep[Int]): Rep[N2]

  //class defs
  def n2_n2id(__x: Rep[N2]): Rep[String]
  def n2_n2junk(__x: Rep[N2]): Rep[Int]
}

trait N2OpsExp extends N2Ops with StructExp with EffectExp with BaseFatExp {
  def n2_obj_new(n2id: Exp[String], n2junk: Exp[Int]) = struct[N2]("N2" :: Nil, Map("n2id" -> n2id, "n2junk" -> n2junk))
  def n2_n2id(__x: Rep[N2]) = field[String](__x, "n2id")
  def n2_n2junk(__x: Rep[N2]) = field[Int](__x, "n2junk")

}

trait ApplicationOps extends LogEntryOps with N1Ops with N2Ops
trait ApplicationOpsExp extends LogEntryOpsExp with N1OpsExp with N2OpsExp
